

TAP 3: DESIGN PATTERNS
-----------------------------



  1. Singleton: http://www.tutorialspoint.com/design_pattern/singleton_pattern.htm
  2. Adapter: http://www.tutorialspoint.com/design_pattern/adapter_pattern.htm
  3. Proxy: http://www.tutorialspoint.com/design_pattern/proxy_pattern.htm
  4. Composite: http://www.tutorialspoint.com/design_pattern/composite_pattern.htm
  5. Observer: http://www.tutorialspoint.com/design_pattern/observer_pattern.htm
  6. Strategy: http://www.tutorialspoint.com/design_pattern/strategy_pattern.htm
  7. Template: http://www.tutorialspoint.com/design_pattern/template_pattern.htm
  8. Visitor: http://www.tutorialspoint.com/design_pattern/visitor_pattern.htm

Exercises:
--------------


1. FILESYSTEM
 ---------------------------------

   Based on the Composite pattern we will implement a basic file system supporting files and directories.
   Every directory has a name and it can contain N files and N directories.
   Every file has name and size.

   You have to implement the following operations:

   1. ls()
   If we perform ls() over one directory, it will print the name of all files and directories that it contains.

   2. collect(): It returns a list of String that contains all names of files and directories that are contained in this directory (include subdirectories).

   3. toList(): It returns one list of all components (can be files or directories) that are contained in this directory (include subdirectories).

   4. size(): It returns the  total size  of all files  contained in this directory (include subdirectories).

   5. search(name): It returns a list of files whose name coincides with name in all sub tree of this directory.

   6. toString(): Redefine toString method of files and directories in order to print on screen the entire path of every file and directory.

   Ex: /home/lp/c.txt or /home/lp

   Example:
   In a main program create this structure of directories:

   /home/
   	  a.txt
    	  b.txt
   	  /lp/
   	      c.txt
   /tmp/
         a.txt
   Check the six functions. You have to use parametric polymorphism in your code when it is possible.

   OPTIONAL PART:
   1. When we add a file that already exists in this directory, throw a custom exception.
   2. Enable the iteration over directories with the for clause (Iterable)
   3. Use Comparator<T>, Collections.sort and Closures to order by name the list that is obtained by toList.

